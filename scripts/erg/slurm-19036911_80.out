
The following have been reloaded with a version change:
  1) gcc/5.1.0 => gcc/5.2.0

Found 2732779 / 2732779 variants
Writing ERG
2732779
25
Done
Finished generating fasta
Settings:
  Output files: "erg/popcov80.*.ebwt"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 5 (one in 32)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  erg/chr9_popcov80.fa
Reading reference sizes
  Time reading reference sizes: 00:00:12
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:14
bmax according to bmaxDivN setting: 112907499
Using parameters --bmax 84680625 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 84680625 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:30
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:09
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:12
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 8; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 6.45186e+07 (target: 84680624)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (84680625) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 74094264 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:53
Returning block of 74094265 for bucket 1
Getting block 2 of 7
  Reserving size (84680625) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 58504335 for bucket 2
  (Using difference cover)
  Sorting block time: 00:01:05
Returning block of 58504336 for bucket 2
Getting block 3 of 7
  Reserving size (84680625) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 51808539 for bucket 3
  (Using difference cover)
  Sorting block time: 00:01:00
Returning block of 51808540 for bucket 3
Getting block 4 of 7
  Reserving size (84680625) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 83908688 for bucket 4
  (Using difference cover)
  Sorting block time: 00:01:39
Returning block of 83908689 for bucket 4
Getting block 5 of 7
  Reserving size (84680625) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 44782225 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:49
Returning block of 44782226 for bucket 5
Getting block 6 of 7
  Reserving size (84680625) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 69653613 for bucket 6
  (Using difference cover)
  Sorting block time: 00:01:23
Returning block of 69653614 for bucket 6
Getting block 7 of 7
  Reserving size (84680625) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 68878328 for bucket 7
  (Using difference cover)
  Sorting block time: 00:01:26
Returning block of 68878329 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 129272551
fchr[G]: 225797426
fchr[T]: 331462884
fchr[$]: 451629998
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 411296119 bytes to primary EBWT file: erg/popcov80.1.ebwt
Wrote 56453756 bytes to secondary EBWT file: erg/popcov80.2.ebwt
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 451629998
    bwtLen: 451629999
    sz: 112907500
    bwtSz: 112907500
    lineRate: 6
    linesPerSide: 1
    offRate: 5
    offMask: 0xffffffe0
    isaRate: -1
    isaMask: 0xffffffff
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 14113438
    offsSz: 56453752
    isaLen: 0
    isaSz: 0
    lineSz: 64
    sideSz: 64
    sideBwtSz: 56
    sideBwtLen: 224
    numSidePairs: 1008103
    numSides: 2016206
    numLines: 2016206
    ebwtTotLen: 129037184
    ebwtTotSz: 129037184
    reverse: 0
Total time for call to driver() for forward index: 00:21:29
Reading reference sizes
  Time reading reference sizes: 00:00:10
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:15
bmax according to bmaxDivN setting: 112907499
Using parameters --bmax 84680625 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 84680625 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:30
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:09
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:12
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 6.45186e+07 (target: 84680624)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (84680625) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 84346849 for bucket 1
  (Using difference cover)
  Sorting block time: 00:01:40
Returning block of 84346850 for bucket 1
Getting block 2 of 7
  Reserving size (84680625) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 83096226 for bucket 2
  (Using difference cover)
  Sorting block time: 00:01:33
Returning block of 83096227 for bucket 2
Getting block 3 of 7
  Reserving size (84680625) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 64065114 for bucket 3
  (Using difference cover)
  Sorting block time: 00:01:04
Returning block of 64065115 for bucket 3
Getting block 4 of 7
  Reserving size (84680625) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 55001034 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:53
Returning block of 55001035 for bucket 4
Getting block 5 of 7
  Reserving size (84680625) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 60055142 for bucket 5
  (Using difference cover)
  Sorting block time: 00:01:02
Returning block of 60055143 for bucket 5
Getting block 6 of 7
  Reserving size (84680625) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 34997545 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:36
Returning block of 34997546 for bucket 6
Getting block 7 of 7
  Reserving size (84680625) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 70068082 for bucket 7
  (Using difference cover)
  Sorting block time: 00:01:16
Returning block of 70068083 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 129272551
fchr[G]: 225797426
fchr[T]: 331462884
fchr[$]: 451629998
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 411296119 bytes to primary EBWT file: erg/popcov80.rev.1.ebwt
Wrote 56453756 bytes to secondary EBWT file: erg/popcov80.rev.2.ebwt
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 451629998
    bwtLen: 451629999
    sz: 112907500
    bwtSz: 112907500
    lineRate: 6
    linesPerSide: 1
    offRate: 5
    offMask: 0xffffffe0
    isaRate: -1
    isaMask: 0xffffffff
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 14113438
    offsSz: 56453752
    isaLen: 0
    isaSz: 0
    lineSz: 64
    sideSz: 64
    sideBwtSz: 56
    sideBwtLen: 224
    numSidePairs: 1008103
    numSides: 2016206
    numLines: 2016206
    ebwtTotLen: 129037184
    ebwtTotSz: 129037184
    reverse: 0
Total time for backward call to driver() for mirror index: 00:19:30
Maximum memory: 1412.0 MB
